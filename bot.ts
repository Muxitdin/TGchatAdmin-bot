import { Bot } from "grammy"
import { User } from "@grammyjs/types"
import dotenv from "dotenv"
dotenv.config()

const bot = new Bot(process.env.BOT_TOKEN as string)

type Member = {
    id: number
    username: string | undefined
}
type ChatId = number | string | undefined;
type UserId = number | undefined;

const members: Member[] = []

const settings = {
    welcomeMessage: "(–ò–º—è), —Ä–∞–¥—ã –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ! ü§ó\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ –ø–æ –æ–±—Ä–∞–∑—Ü—É (—Å–º. –ø–æ—Å—Ç –≤ –∑–∞–∫—Ä–µ–ø–µ)!",
    allMessage: "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! ü§ó\n\n–ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –í–∞—Å –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –≤ –∞–∫—Ç–∏–≤!\n\n–£—Å–ø–µ–π—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ!\n\n–ñ–¥–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ!",
    stopMessage: "–î–æ–±—Ä—ã–π –¥–µ–Ω—å ü§ó\n\n–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏ —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç. –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —É—á–∞—Å—Ç–∏–µ –∏ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.\n\n–ñ–µ–ª–∞–µ–º –≤—Å–µ–º —Ö–æ—Ä–æ—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –±—É–¥–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã, –µ—Å–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏! üôè\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –≤—ã–¥–µ—Ä–∂–∞—Ç—å –ø–æ—Å—Ç –≤ –ª–µ–Ω—Ç–µ!üôè\n\n–ñ–¥–µ–º –≤–∞—Å –≤ —Å–ª–µ–¥—É—é—â–∏–µ –∞–∫—Ç–∏–≤—ã!\n\n–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –æ–±–æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö –º—ã –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–¥–µ—Å—å ‚¨áÔ∏è\n\nhttps://t.me/tema_podborka\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º!",
}

bot.command("start", async (ctx) => {
    await ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –ó–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
})

bot.on("chat_member", async (ctx) => {
    const change = ctx.chatMember
    if (change.new_chat_member.status === "member") {
        const member = change.new_chat_member.user
        if (!member.username) return
        if (!members.some(m => m.username === member.username)) {
            members.push({ id: member.id, username: member.username || "undefined" })
        }
        const welcome = settings.welcomeMessage.replace("(–ò–º—è)", `@${member.username}` || member.first_name)
        await ctx.reply(welcome)
    }
})

bot.on("message", async (ctx, next) => {
    console.log(ctx.message.from)

    const user: User = ctx.message.from

    if (!user.username) return

    if (!members.some((member) => member.id === user.id)) {
        members.push({ id: user.id, username: user.username || "undefined"})
    }
    console.log(members)

    await next(); // continue with the next middleware
})

bot.command("all", async (ctx) => {
    try {
        const mentions = members
            .filter((m) => m.username)
            .map((m) => `@${m.username}`)
            .join("\n")

        console.log(mentions)
        const message = mentions
            ? `${settings.allMessage}\n\n${mentions}`
            : "–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å username –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è."

        await ctx.reply(message)
    } catch (error) {
        console.log("–û—à–∏–±–∫–∞ –≤ /all:", error)
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    }
})

bot.command("stop", async (ctx) => {
    try {
        const message = settings.stopMessage
        await ctx.reply(message)
    } catch (error) {
        console.log("–û—à–∏–±–∫–∞ –≤ /stop:", error)
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    }

})

bot.command("ban", async (ctx) => {
    try {
        const chatId: ChatId = ctx.message?.chat.id
        const userIdExecuting: UserId = ctx.message?.from.id

        if (chatId && userIdExecuting) {
            const chatMember = await ctx.api.getChatMember(chatId, userIdExecuting);
            if (!["administrator", "creator"].includes(chatMember.status)) {
                await ctx.reply("–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.");
                return;
            }
        }

        const externalReplyOrigin = ctx.message?.external_reply?.origin;
        if (externalReplyOrigin && "sender_user" in externalReplyOrigin) {
            const userIdTarget: UserId = externalReplyOrigin.sender_user.id
            if (chatId && userIdTarget) {
                await ctx.api.banChatMember(chatId, userIdTarget);
                await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${externalReplyOrigin.sender_user.username} –∑–∞–±–∞–Ω–µ–Ω.`)
                return;
            } else {
                await ctx.reply("–°–±–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
                return
            }
        }

        if (ctx.match && ctx.match.startsWith('@')) {
            const username = ctx.match.slice(1)
            const targetArray = members.filter((member) => member.username === username)
            console.log(targetArray)
            const userTarget = targetArray[0]
            console.log(userTarget.id);
            if (chatId && userTarget) {
                await ctx.banChatMember(userTarget.id).then(() => {
                    ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${userTarget.username} –∑–∞–±–∞–Ω–µ–Ω.`);
                    console.log(members)
                });
            } else {
                await ctx.reply("–°–±–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π username.");
            }
            return
        }

        await ctx.reply("–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –∏–ª–∏ —É–∫–∞–∑–∞–≤ username.");
    } catch (error) {
        console.log(error);
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    }
})

bot.command("unban", async (ctx) => {
    try {
        const chatId: ChatId = ctx.message?.chat.id;
        const userIdExecuting: UserId = ctx.message?.from.id;

        if (chatId && userIdExecuting) {
            const chatMember = await ctx.api.getChatMember(chatId, userIdExecuting);
            if (!["administrator", "creator"].includes(chatMember.status)) {
                await ctx.reply("–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.");
                return;
            }
        }

        const externalReplyOrigin = ctx.message?.external_reply?.origin;
        if (externalReplyOrigin && "sender_user" in externalReplyOrigin) {
            const userIdTarget: UserId = externalReplyOrigin.sender_user.id
            if (chatId && userIdTarget) {
                await ctx.api.unbanChatMember(chatId, userIdTarget);
                await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${externalReplyOrigin.sender_user.username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`);
                try {
                    await ctx.api.sendMessage(chatId, `@${externalReplyOrigin.sender_user.username}, –≤—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∞—Ç. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!`);
                } catch (error) {
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:", error);
                }
            } else {
                await ctx.reply("–°–±–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.");
            }
            return
        }

        if (ctx.match && ctx.match.startsWith('@')) {
            const username = ctx.match.slice(1);
            console.log(members);
            const targetArray = members.filter((member) => member.username === username);
            const userTarget = targetArray[0];
            console.log(chatId, userTarget)
            if (chatId && userTarget) {
                await ctx.api.unbanChatMember(chatId, userTarget.id);
                await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${userTarget.username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`);
                try {
                    await ctx.api.sendMessage(userTarget.id, `@${userTarget.username}, –≤—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∞—Ç @${ctx.chat.username}. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!`);
                } catch (error) {
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:", error);
                }
            } else {
                await ctx.reply("–°–±–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π username.");
            }
            return;
        }

        await ctx.reply("–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –∏–ª–∏ —É–∫–∞–∑–∞–≤ username.");
    } catch (error) {
        console.log(error);
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
});

bot.command("mute", async (ctx) => {
    try {
        const chatId: ChatId = ctx.message?.chat.id
        const userIdExecuting: UserId = ctx.message?.from.id

        if (chatId && userIdExecuting) {
            const chatMember = await ctx.api.getChatMember(chatId, userIdExecuting);
            if (!["administrator", "creator"].includes(chatMember.status)) {
                await ctx.reply("–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.");
                return;
            }
        }

        const mutePermissions: any = {
            can_send_messages: false,
            can_send_media_messages: false,
            can_send_polls: false,
            can_send_other_messages: false,
        };

        const externalReplyOrigin = ctx.message?.external_reply?.origin;

        if (externalReplyOrigin && "sender_user" in externalReplyOrigin) {
            const userIdTarget = externalReplyOrigin.sender_user.id as UserId
            if (chatId && userIdTarget) {
                await ctx.api.restrictChatMember(chatId, userIdTarget, {...mutePermissions});
                await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${externalReplyOrigin.sender_user.username} –≤ –º—É—Ç–µ.`)
                return;
            } else {
                await ctx.reply("–°–±–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
                return
            }
        }

        if (ctx.match && ctx.match.startsWith('@')) {
            const username = ctx.match.slice(1)
            const targetArray = members.filter((member) => member.username === username)
            console.log("111: " + targetArray)
            const userTarget = targetArray[0]
            console.log("222: "+userTarget.id);
            if (chatId && userTarget) {
                await ctx.api.restrictChatMember(chatId, userTarget.id, {...mutePermissions}).then(() => {
                    ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${userTarget.username} –≤ –º—É—Ç–µ.`);
                    console.log(members)
                });
            } else {
                await ctx.reply("–°–±–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π username.");
            }
            return
        }

        await ctx.reply("–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º—É—Ç–∞, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –∏–ª–∏ —É–∫–∞–∑–∞–≤ username.");
    } catch (error) {
        console.log(error);
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    }
})

// noinspection JSIgnoredPromiseFromCall
bot.start({
    allowed_updates: ["chat_member", "message"],
})